{"name":"Backbone.Decorator","tagline":"","body":"Backbone Decorator\r\n==================\r\n\r\nIf you have lot's of data in your templates that needs formatting or\r\njust a seperate way of displaying your model in one View or another.\r\n\r\nDecorators are very usefull if you have a `events`-rich View, which\r\nussually have quite some template data aswell. The Decorator is here to keep\r\nyour Views focussed on the events and all supporting functions around the\r\nthose events.\r\n\r\nExample:\r\n```javascript\r\n\r\n    App.ProductsView = Backbone.View.extend({\r\n      // decorator is assigned here\r\n      decorator: App.ProductsDecorator,\r\n\r\n      initialize: function() {\r\n        this.listenTo(this.model, '...', this.someFunc);\r\n      },\r\n\r\n      events: {\r\n        // some lot's of events here\r\n        '...': '...'\r\n      },\r\n\r\n      // some lots of functions to support event-functions here\r\n\r\n      render: function() {\r\n        // getTemplateData is injected into Backbone.View\r\n        // because a decorator is assigned.\r\n        var data = this.getTemplateData();\r\n        this.el.html(template(data));\r\n      }\r\n\r\n    });\r\n\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}